import { assert } from "tsafe/assert";
import type { BuildContext } from "./buildContext";
import { getThemeSrcDirPath } from "./getThemeSrcDirPath";
import * as fs from "fs/promises";
import { join as pathJoin } from "path";

export type BuildContextLike = {
    projectDirPath: string;
    themeNames: string[];
    environmentVariables: { name: string; default: string }[];
};

assert<BuildContext extends BuildContextLike ? true : false>();

export async function generateKcGenTs(params: {
    buildContext: BuildContextLike;
}): Promise<void> {
    const { buildContext } = params;

    const { themeSrcDirPath } = getThemeSrcDirPath({
        projectDirPath: buildContext.projectDirPath
    });

    await fs.writeFile(
        pathJoin(themeSrcDirPath, "kc.gen.ts"),
        Buffer.from(
            [
                `/* prettier-ignore-start */`,
                ``,
                `/* eslint-disable */`,
                ``,
                `// @ts-nocheck`,
                ``,
                `// noinspection JSUnusedGlobalSymbols`,
                ``,
                `// This file is auto-generated by Keycloakify`,
                ``,
                `export type ThemeName = ${buildContext.themeNames.map(themeName => `"${themeName}"`).join(" | ")};`,
                ``,
                `export const themeNames: ThemeName[] = [${buildContext.themeNames.map(themeName => `"${themeName}"`).join(", ")}];`,
                ``,
                `export type KcEnvName = ${buildContext.environmentVariables.length === 0 ? "never" : buildContext.environmentVariables.map(({ name }) => `"${name}"`).join(" | ")};`,
                ``,
                `export const KcEnvNames: KcEnvName[] = [${buildContext.environmentVariables.map(({ name }) => `"${name}"`).join(", ")}];`,
                ``,
                `export const kcEnvDefaults: Record<KcEnvName, string> = ${JSON.stringify(
                    Object.fromEntries(
                        buildContext.environmentVariables.map(
                            ({ name, default: defaultValue }) => [name, defaultValue]
                        )
                    ),
                    null,
                    2
                )};`,
                ``,
                `/* prettier-ignore-end */`
            ].join("\n"),
            "utf8"
        )
    );
}
